#!/usr/bin/bash
#set -xv
# WRAPPER: IMPORTANT DON'T CHANGE ANYTHING HERE
VERSION="1.5.40-nightly"
[ -z "$BASH_VERSION" ] && exec bash "$0" "$@"
unset HISTSIZE
# shellcheck disable=SC1090
__BASE_REPO__="nene"
__DIR__="${HOME}/.basher/cellar/packages/luisadha/${__BASE_REPO__}"
online_apps() {
    read -r __url__ < <(curl -s https://not-echo-not-true.carrd.co |
    html2text |
    grep -oP '(?<=\])\(\K[^)]+' |
    grep '^https\?://' |
    grep -E 'github\.com|github\.io|luisadha\.my\.id' |
    sort -ur |
    awk '{print $0 "\t" gensub(".*/", "", "g", $0)}' |
    fzf --with-nth=2 --prompt="Choose (script): " --delimiter='\t');
    [ -z "$__url__" ] && echo -e "\nCaught ^"
# shellcheck disable=SC1090
    . <(curl -sL "$__url__")
   return 0
}
default_apps() {
    exec python3 "${__DIR__}/not-echo-not-true.py"
    return 0
}
url() {
    read -r __url__ < <(curl -s https://not-echo-not-true.carrd.co | html2text | grep -oP '(?<=\])\(\K[^)]+' | grep '^https\?://' | grep -E 'github\.com|github\.io|luisadha\.my\.id' | sort -ur | fzf --prompt="Indexing URL: " | xargs -r termux-open-url);
    return 0
}
homepage() {
    termux-open-url https://not-echo-not-true.carrd.co
    return 0
}
addon() {
echo -e "Creating file.. ~/bin/nene-ak47.sh"
cat <<'EOF' > "$HOME"/bin/nene-ak47.sh
# Nene-ak47 is receiver script for termux-url-opener to run many nene webapp script
# Copyright (C) 2025 Luis Adha under MIT License.
: "If you change this, you-
will not be able to run-
webapp-based Bash scripts-
through Android sharing until-
you change it back."
: "Jika anda mengganti ini-
anda tidak bisa menjalankan-
scirpt bash berbasis webapp-
melalui android berbagi-
sampai anda mengantinya lagi."
    url=$1
    curl -L "$url" | bash
    echo "Process completed."
    read wait
EOF
sleep 0.4;
echo "..done"
return 0
}
help() {
cat <<'EOF'
Nene is both a static site and a set of Bash tools you can run straight from your terminal
Usage :
  -a    --api-termux    Installs nene-ak47 to run Nene via WebApp using Android Share
  -u    --select-url    Select a webapp to open the link. This option is only effective when used after the -a option
        --homepage      Open homepage related this project
    -Ss                 Query package metadata in JSON format
  -S    --search=[apps] Execute the explicitly specified application
  -m    --mode=[online] Select and run through the link
  -v    --version       Print version script and exit
  -h    --help          Print this message and exit
EOF
}
version() {
echo "nene v${VERSION}"
return 0
}

if [[ $# -eq 0 ]]; then
default_apps;
fi

if [[ "$1" == "-s" || "$1" == "--s" ]]; then
  echo -e "Invalid option, you means \`-Ss' ?";
    exit 1
fi

for arg in "$@"; do
  case "$arg" in
    --homepage)
        homepage;;
    -a|--api-termux)
        addon;;
    -u|--select-url)
        url;;
    -h|--help)
        help;;
    -v|--version)
        version;;
   --mode|--mode=*)
          if [[ "$arg" == *=* ]]; then
            parse="$arg";
            #echo "$parse"
          else
            parse="${arg}=";
            #echo "$parse"
          fi;
MODE_ARG="${arg#--mode=}";
          if [[ -z "$MODE_ARG" ]]; then
echo -e "Invalid option, you mean \`${parse}online' ?";
exit 1;
          else
              SPARAM="$MODE_ARG";
             # echo "$SPARAM"
          fi;
modes="$SPARAM";
          if [[ "$modes" == "online" ]]; then
          online_apps;
          elif [[ "$modes" == "default" ]]; then
          default_apps;
          elif [[ "$modes" == "offline" ]]; then
          default_apps;
          else
          echo "Unknown value in $arg";
          exit 2;
          fi
        shift;
      ;;
    -m|-m=*)
          if [[ "$arg" == *=* ]]; then
            parse="$arg";
            #echo "$parse"
          else
            parse="${arg}=";
            #echo "$parse"
          fi;
M_ARG="${arg#-m=}";
          if [[ -z "$M_ARG" ]]; then
echo -e "Invalid option, you mean \`${parse}online' ?";
exit 1;
          else
              SPARAM="$M_ARG";
             # echo "$SPARAM"
          fi;
modes="$SPARAM";
          if [[ "$modes" == "online" ]]; then
          online_apps;
          elif [[ "$modes" == "default" ]]; then
          default_apps;
          elif [[ "$modes" == "offline" ]]; then
          default_apps;
          else
          echo "Unknown value in $arg";
          exit 2;
          fi
        shift;
      ;;
    --search=*)
                if [[ "$arg" == *=* ]]; then
                  parse="$arg";
                else
                  parse="${arg}=";
                fi;
SELECT_ARG="${arg#--search=}";
                if [[ -z "$SELECT_ARG" ]]; then
echo -e "Invalid option, you mean \`${parse}PACKAGE' ?";
exit 1;
                else
                    SPARAM="$SELECT_ARG";
                fi;
read -r __url__ __endpoint__ < <(curl -s https://not-echo-not-true.carrd.co 2>/dev/null | html2text | grep -oP '(?<=\])\(\K[^)]+' | grep '^https\?://' | grep -E 'github\.com|github\.io|luisadha\.my\.id' | sort -ur | awk '{print $0 "\t" gensub(".*/", "", "g", $0)}' | fzf --with-nth=2 --prompt="Choose (script): " --delimiter='\t' -1 -0 -q "${SPARAM:-}"); [ -z "$SPARAM" ] && echo -e "\nCaught ^C" || echo -e "Executing.. $__endpoint__";
# shellcheck disable=SC1090
. <(curl -sL "$__url__" 2>/dev/null);
      shift;
        exit 0
      ;;
    -S=*)
                if [[ "$arg" == *=* ]]; then
                  parse="$arg";
                else
                  parse="${arg}=";
                fi;
S_ARG="${arg#-S=}";
                if [[ -z "$S_ARG" ]]; then
echo -e "Invalid option, you mean \`${parse}PACKAGE' ?";
exit 1;
                else
                    SPARAM="$S_ARG";
                fi;
read -r __url__ __endpoint__ < <(curl -s https://not-echo-not-true.carrd.co 2>/dev/null | html2text | grep -oP '(?<=\])\(\K[^)]+' | grep '^https\?://' | grep -E 'github\.com|github\.io|luisadha\.my\.id' | sort -ur | awk '{print $0 "\t" gensub(".*/", "", "g", $0)}' | fzf --with-nth=2 --prompt="Choose (script): " --delimiter='\t' -1 -0 -q "${SPARAM:-}"); [ -z "$SPARAM" ] && echo -e "\nCaught ^C" || echo -e "Executing.. $__endpoint__";
# shellcheck disable=SC1090
. <(curl -sL "$__url__" 2>/dev/null);
      shift;
        exit 0
      ;;
    -S|--search)
_S_ARG="$2";
                if [[ -z "$_S_ARG" ]]; then
echo -e "Error: option $arg request an argument $_S_ARG";
exit 1
                else                                                                   
SPARAM="$_S_ARG";
fi;
# shellcheck disable=SC1090
read -r __url__ __endpoint__ < <(curl -s https://not-echo-not-true.carrd.co 2>/dev/null | html2text | grep -oP '(?<=\])\(\K[^)]+' | grep '^https\?://' | grep -E 'github\.com|github\.io|luisadha\.my\.id' | sort -ur | awk '{print $0 "\t" gensub(".*/", "", "g", $0)}' | fzf --with-nth=2 --prompt="Choose (script): " --delimiter='\t' -1 -0 -q "${SPARAM:-}"); [ -z "$SPARAM" ] && echo -e "\nCaught ^C" || echo -e "Executing.. $__endpoint__";
# shellcheck disable=SC1090
. <(curl -sL "$__url__" 2>/dev/null);
      shift;
        exit 0
      ;;
    -sS|-Ss)
      keyword="$2";
        if [ -z "$keyword" ]; then
          echo "Error: option -$arg request an argument"; exit 2;
        fi
      read -r url repo < <(curl -s https://not-echo-not-true.carrd.co 2>/dev/null | html2text | grep -oP '(?<=\])\(\K[^)]+' | grep '^https\?://' | grep -E 'github\.com|github\.io|luisadha\.my\.id' | sort -ur | awk '{print $0 "\t" gensub(".*/", "", "g", $0)}' | fzf --with-nth=2 --prompt="Choose (script): " --delimiter='\t' -q "${keyword:-}" -1 -0)
        echo "$url $repo"
      if [ -n "$keyword" ]; then
        status=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/luisadha/${repo}/contents/bin")
        if [ "$status" = "200" ]; then
          echo '{"fallback": true}' | jq
        else
          echo '{"fallback": false}' | jq
        fi
        exit 0;
      else
        echo "❌ Tidak ditemukan repo dari $url"
        exit 1;
      fi
    ;;
    -Si|-iS)
        keyword="$2";
        if [ -z "$keyword" ]; then
          echo "Error: option -$arg request an argument"; exit 2;
        fi
      read -r url repo < <(curl -s https://not-echo-not-true.carrd.co 2>/dev/null | html2text | grep -oP '(?<=\])\(\K[^)]+' | grep '^https\?://' | grep -E 'github\.com|github\.io|luisadha\.my\.id' | sort -ur | awk '{print $0 "\t" gensub(".*/", "", "g", $0)}' | fzf --with-nth=2 --prompt="Choose (script): " --delimiter='\t' -q "${keyword:-}" -1 -0)
        #echo "$url $repo"
      if [ -n "$keyword" ]; then
        status=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/luisadha/${repo}/contents/bin")
        if [ "$status" = "200" ]; then
            #echo '{"fallback": true}' | jq
            if [[ $? -eq 0 ]]; then
                target="$PREFIX/bin";
                mkdir -p "$target"
                pushd "$target" > /dev/null
                gum spin --spinner minidot --title "Installing ${repo} to \$PREFIX/bin" -- wget -qO "${repo}" "${url}" && chmod +x "${repo}"
                popd > /dev/null
                    if [ $? -eq 0 ]; then gum style --foreground 42 --bold "✅ ${repo} was successfully installed to \$PREFIX/bin!"
                    else gum style --foreground 196 --bold "❌ Failed to install ${repo}."
                    fi
            fi
        else
            echo '{"fallback": false}' | jq
            echo "❌ Can't find package from $url, install failed!"
            exit 1;
        fi
            exit 0;
        else
         echo "Error";
      fi
    ;;
    *)
      echo "Error: Unknown options"
      exit 1;
    ;;
  esac
done
